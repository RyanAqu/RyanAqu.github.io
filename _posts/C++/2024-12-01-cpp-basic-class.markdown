---
layout:     post
title:      "C++ Basic & C With Classes"
subtitle:   " \"learning……\""
date:       2024-12-01 15:00:00
author:     "Ryan"
header-img: "img/bg-walle.jpg"
catalog:    true
tags:
    - c++
---

> 冰柜为什么是个箱子，冰箱为什么是个柜子


# C++基础
![C++应用](https://ryanaqu.github.io/img/inpost_cpp/image0.png)  
![代码编译运行](https://ryanaqu.github.io/img/inpost_cpp/image1.png) 
## c++标准开头
#之后的内容是预处理，include代表引入程序库
```
#include <iostream>   //引入标准输入输出流库，用于实现输入输出功能。  
#using namespace std; //声明使用标准命名空间 std 中的所有标识符。

cin.get();            //等待键盘输入，可以防止窗口直接退出

system("pause");      //任意键以继续
```

## 标准输入输出
```
cout<<variable<<endl;   //标准输出，默认类型，默认十进制
cout<<hex;              //改为16进制输出
cout<<oct;              //改为8进制输出
cout<<dec;              //改为10进制输出

cin>>variable;          //输入内容到变量
```


## 编译和链接
### 编译
编译是将源代码（如 .c 或 .cpp 文件）转换为机器无法直接运行的中间文件（通常是目标文件 .o 或 .obj）。

**主要过程：**
* 预处理：由预处理器完成，处理#define，#include等指令，将结果传递给编译器
* 语法分析：检查代码的语法和语义是否正确
* 代码生成：将代码转化为对应平台的汇编代码
* 目标文件生成：将代码进一步转化为机器码，并存储为目标文件

编译的输出通常是目标文件（.o 或 .obj），它包含了机器指令，但这些指令是未链接的，无法独立运行。编译器（如 gcc、g++ 、clang 或 MSVC）。

### 链接
链接是将编译生成的目标文件与库文件结合在一起，生成最终的可执行文件（如 .exe 或 .out）。

**主要过程：**  
* 符号解析：确定所有函数和变量的定义位置（如在库或其他目标文件中）。
* 地址分配：将每个符号分配到实际内存地址。
* 合并段：将多个目标文件中不同类型的段（如 .text、.data）合并为单一的可执行文件。
* 库文件整合：链接静态库或动态库提供的代码。

链接的输出是最终的可执行文件，它可以直接运行在目标系统上。链接器（如 ld 或链接器程序内嵌于 gcc 和 clang 中）。

## 注释
```
//这是单行注释
//以下是多行注释
/**
 * @brief 这是函数描述
 * @param 这是变量描述
 * @return 这是返回值描述
 */
```

## 变量
程序中定义可以修改的量，变量有作用域（scope），一般以{}分隔，{}外定义的变量具有“全局作用域”（global scope），称为“全局变量”（block scope）；{}内具有“块作用域”，称为“局部变量”。

> 如果变量重名的话，作用域更小的变量申明能覆盖其他的变量。

**数值类型：**  
int：整形，4字节  
short：短整型，2字节，-32768~32767  
long：长整型，4字节，一般和int一样长  
long long:更长的整形，至少8字节  
signed：有符号  
unsigned：无符号  
float：单精度浮点型，4字节  
double：双精度浮点型，8字节  
**字符类型：**  
char：字符型，1字节，ASCII码（“A”为65，“0”为48）  
wchar_t：宽字符，2字节  
char16_t:Unicode字符，2字节，16位  
char32_t:Unicode字符，4字节，32位  
**bool类型：**  
true:真，1字节  
false:假，1字节  

```
int a = 10;     // 定义一个整型
float b = 3.14; // 定义一个浮点型
char c = 'A';   // 定义一个字符，通常占一个字节（8bit）
int a,b,c;      // 申明多个变量
bool b1 = true; // 定义布尔类型
sizeof(x);      // 查看变量字节数大小的函数
```
如果要跨平台开发，需要定义uint8_t之类的变量，需要引入头文件
```
#include<stdint.h> //c语言中的头文件，c++可兼容
#include<cstdint>  //c++中的头文件，与c++风格一致，但是需要命名域，譬如std:: uint8_t x = 2;
```
**数值计算原则：**
* 一般的整数计算全部用int
* 如果数值超出了int则用long long
* 确定数值不能为负则用unsigned

## 常量
用于记录程序中不可修改的量，有两种定义方法，①修饰词：const ②宏定义：#define
```
//以下两种都不能够更改变量内容，否则程序会报错
#define day 7       //宏
const int day = 10; //const常量
```
数值标签&字面值
```
cout<<36<<endl;     //输出十进制数36
cout<<036<<endl;    //在数字前面加一个0，为八进制，输出十进制数30
cout<<0x36<<endl;   //在数字前面加一个0x，为十六进制，输出十进制54

int a = 36l;        //l或L标签，表示long类型
int a = 36ll;       //ll或LL标签，表示long long类型
int a = 36u;        //u标签，表示unsigned类型
int a = 36ull;      //表示unsigned long long类型

float a = 36f;      //f或F标签，表示float类型
```
转义字符
```
\r  --  回车
\n  --  换行
\t  --  横向制表
\v  --  纵向制表符
\\  --  反斜杠\
\'  --  单引号'
\"  --  双引号"
\?  --  问号?
\b  --  退格符
```

## 运算符
优先级从高到低：

```
符号            功能            用法                   注意
----------------------------------------------------------------
::            作用域解析     std::cout
----------------------------------------------------------------
()             函数调用
[]             数组下标
.              成员访问
->             成员访问
++(后缀)        自加        (expr)++
--(后缀)        自减        (expr)--
----------------------------------------------------------------
++(前缀)        自加        ++(expr)     这一部分结合性都是从右到左
--(前缀)        自减        --(expr)
+               正号        + expr
-               负号        - expr
!              逻辑非       !(expr)
~              按位取反     ~(expr)
*              解引用       *ptr=&num
&              取地址       *ptr=&num
sizeof         字节大小     sizeof(para)
new            
delete
----------------------------------------------------------------
.*             成员指针访问
.->            成员指针访问
----------------------------------------------------------------
*               乘号        expr * expr
/               除号        expr / expr
%               取余        expr % expr      两个操作数必须都是整数
----------------------------------------------------------------
+               加号        expr + expr
-               减号        expr - expr
----------------------------------------------------------------
<<              左移
>>              右移
----------------------------------------------------------------
<               小于
<=             小于等于
>               大于
>=             大于等于
----------------------------------------------------------------
!=              不等于
==              等于
----------------------------------------------------------------
&               按位与
^              按位异或
|               按位或
----------------------------------------------------------------
&&              逻辑与
||              逻辑或
----------------------------------------------------------------
?:             条件运算符
----------------------------------------------------------------
= += -= *= /= %= <<= >>= &= ^= |=  赋值
```

测试自增自减运算符（前缀和后缀的差异）
```
int i=0,j=10;
j=i++;
cout<<"test i++ : i="<<i<<",j="<<j<<endl;

i=0;
j=10;
j=++i;
cout<<"test ++i : i="<<i<<",j="<<j<<endl;

//输出结果
test i++ : i=1,j=0
test ++i : i=1,j=1
```

短路原则：当逻辑符号左侧的布尔值已经能决定整体逻辑时，右侧的表达式将不被执行计算

## 隐式类型转换
* 整数提升，bool、char、short等变成int  
* 表达式中既有整型又有浮点则会变成浮点
* 逻辑表达式&逻辑判断中其他类型变成bool类型

## 强制类型转换
c++使用static_cast
```
int total = 20, num = 6;
double avg = total / num;           //最终输出3
```
```
int total = 20, num = 6;
double avg = double(total) / num;   //最终输出3.333

double avg = static_cast<double>(total) / num;//最终输出3.333
```

## 条件语句
```
//if 分支
if(condition){
    expr;
}  
else if(condition){
    expr;
}  
else{
    expr;
}  

//switch分支
switch(condition){
    case value1:expr1;break;
    case value2:expr2;break;
    ……
    default:break;
}

```

## 循环语句
```
//for 循环
for(int i=0;i<max_num;i++){
    expr;
}

//范围 for 循环
for(int num:{5,4,6,3,4,5}){
    expr;
}

//while循环  
while(condition){
    expr;
}

//do while
do{
    expr;
}while(condition)
```

## 跳转
```
break;
continue;//结束本次，开启下一次
tag:语句;  goto tag;
return;
```

## 数组
具有相同类型的数据对象有序排列，在内存中连续存放  
```
数据类型 数组名[元素个数]；         //定义数组
int a1[10];                         
const int n=4;double a2[n];       //元素个数可以是常量表达式，但不能是变量

int a3[4]={1,2,3,4};              //数组初始化
float a4[]={2.5,3.8,1.79};
short a5[10] = {3,6,9};
char c[10];

```

