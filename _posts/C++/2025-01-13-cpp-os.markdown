---
layout:     post
title:      "操作系统"
subtitle:   " \"learning……\""
date:       2025-01-13 19:42:00
author:     "Ryan"
header-img: "img/bg-walle.jpg"
catalog:    true
tags:
    - c++
    - OS
---

> 风花雪月本闲，而扰攘者自冗.....


**纯理论八股复习**

# 操作系统绪论  
### 操作系统分类  
* 分时操作系统
* 实时操作系统
  * 硬实时：导弹、通信
  * 软实时：订票

### 操作系统运行机制  
CPU上运行两种程序：区分内核程序（操作系统kernel开发）和应用程序（应用开发）  

![image](https://github.com/user-attachments/assets/c70956cb-5931-46d0-8b41-64e3bc38aa97)

1. 刚开机时，CPU为内核态，操作系统内核程序先上CPU运行  
2. 开机完成后，用户可以启动某个应用程序  
3. 操作系统在合适的时候主动让出CPU，让该程序上CPU运行
4. 应用程序运行在用户态
5. 用户态程序非法事件会导致中断产生

![image](https://github.com/user-attachments/assets/a2c285b8-3895-4615-8e44-2e5f5a786430)


### 中断和异常  
中断是操作系统夺回使用权的唯一途径，会让用户态切回内核态  

中断分类：
* 内中断：CPU执行某些指令时，发现非法行为（或者错误）产生，就会产生内中断；或者有用户态的“陷入指令”要求系统调用
  * 陷入trap（系统调用）
  * 故障fault
  * 终止abort（程序挂掉，可以吐核）
* 外中断：
  * 时钟中断（alarm定时）
  * I/O中断  

中断屏蔽->中断请求->中断管理器->中断向量表->中断处理函数

### 系统调用  
系统调用是在内核态执行的，相当于软中断

常见的 Linux 系统调用分类：
* 进程管理：用于创建、管理和终止进程。#include<unistd.h>。
  * fork()：创建一个子进程。
  * exec()：执行程序，替换当前进程的镜像。exec函数族。
  * exit()：终止当前进程。
  * wait()：等待子进程终止。
  * waitpid()：等待指定子进程终止。
  * getpid()：获取进程的 PID。
  * getppid()：获取父进程的 PID。
  * kill()：发送信号给进程。
* 文件操作：用于文件和目录的创建、删除、读取、写入等操作。
  * open()：打开文件或设备。
  * read()：从文件读取数据。
  * write()：将数据写入文件。
  * close()：关闭文件。
  * stat()：获取文件的状态信息。
  * unlink()：删除文件。
  * mkdir()：创建目录。
* 内存管理：用于动态分配和管理内存。
  * mmap()：映射文件或设备到内存。
  * munmap()：解除内存映射。
  * brk()：调整进程的堆内存。
  * sbrk()：增长或减少数据段的大小。
* 设备控制： 用于与设备交互的系统调用。
  * ioctl()：控制设备的操作。
  * read()：从设备读取数据。
  * write()：向设备写入数据。
* 信号处理： 用于处理进程间的信号通信。
  * signal()：设置信号处理函数。
  * kill()：向进程发送信号。
  * pause()：使进程挂起，等待信号。
  * sigaction()：设置信号处理方式。
* 进程间通信： 用于在不同进程之间交换数据。
  * pipe()：创建管道。
  * shmget()：创建共享内存段。
  * mqueue()：消息队列。
  * msgget()：获取消息队列。
* 网络通信： 用于套接字和网络协议的操作。
  * socket()：创建网络套接字。
  * bind()：将套接字与地址绑定。
  * connect()：连接到远程服务器。
  * send()：发送数据。
  * recv()：接收数据。

### 操作系统内核  
![image](https://github.com/user-attachments/assets/375fb253-2e74-4e4f-8d4d-793e3d7ec451)

![image](https://github.com/user-attachments/assets/e3b39ed3-8e3e-491f-a78b-f1abf0489c56)

### 操作系统引导  
Linux操作系统引导  
1. BIOS/UEFI 启动：硬件初始化，加载引导程序。
2. 引导加载程序（GRUB 或其他）：选择并加载操作系统内核。
3. 内核初始化：加载设备驱动，挂载根文件系统，初始化系统。
4. 用户空间启动：启动 init 或 systemd 进程，进入多用户模式。

### 虚拟机  

![image](https://github.com/user-attachments/assets/16ef7052-0f5c-48f9-bcf0-6a47152651dc)

![image](https://github.com/user-attachments/assets/7bdca676-5129-4cc9-ad48-2d11f327864d)

# 进程  
进程的组成
* 进程控制块 -- PCB
* 程序段
* 数据段

同一个程序可以产生多个进程，譬如QQ程序可以开多个窗口，登陆多个QQ，进程是程序的一次执行过程  
每个进程都有唯一的PID，是由操作系统动态分配的  

查看进程的命令  
````
ps -ef        //显示所有进程的详细信息，包括 PID、父进程 PID、用户、CPU 时间、启动时间等。
ps -ef | grep process_name  //查找进程
top
````

![image](https://github.com/user-attachments/assets/f1438bae-ea4b-458a-8f65-8de70b7247e1)

### 进程的状态与转换    
创建态->就绪态->运行态(CPU调度之后进入运行)->结束态  
进程可以主动进入阻塞态  
````
    +---------+        +---------+
    |创建(New)| -----> |就绪(Ready)|
    +---------+        +---------+
                          |  ^
      调度器分配CPU       |  |   时间片用尽
                          v  |
                     +---------+      等待完成
                     | 运行(Run)|  -------------------> +---------+
                     +---------+                        |等待(Wait)|
                         |                              +---------+
                         v
                     +---------+
                     |终止(Term)|
                     +---------+

````

![image](https://github.com/user-attachments/assets/ad971ae8-766c-43a1-a072-6657af3ee91f)

![image](https://github.com/user-attachments/assets/cbfc39b8-8ca2-4083-a0c4-9f728ce45179)

![image](https://github.com/user-attachments/assets/76c4ad67-3067-4082-b25a-199279980b9d)

### 进程控制  
进程控制（状态转换）要一气呵成，不能被中断，所以要利用原语实现。  
原语具有原子性，是原子操作，原语是指操作系统提供的一些低级别、不可分割的基本操作，用于实现对共享资源的同步与保护。原语通常由内核实现，保证其在执行过程中不会被中断，从而确保并发环境中的操作原子性。  
PCB可以自动保存程序运行上下文，也就可以在程序下CPU之后重新运行时还原进程运行环境。  

1. 进程创建
    * 创建新的进程并分配资源。
    * 典型原语：fork()
2. 进程执行
    * 替换当前进程的代码和数据，执行新的程序。
    * 典型原语：exec()函数族
3. 进程终止  
    * 终止进程的执行，释放资源。
    * 典型原语：exit() kill() _exit()
4. 进程等待
    * 等待子进程状态变化（完成、被杀死等）。
    * 典型原语：wait() waitpid()
5. 进程阻塞
    * 将进程状态从运行态切换为阻塞态，等待某条件满足。
    * 典型原语：sleep() pause()
6. 进程唤醒
    * 将进程从阻塞态切换回就绪态。
    * 典型原语：信号机制 kill(pid, signal)：向进程发送信号唤醒。
7. 进程通信
    * 用于多个进程之间的交互与信息共享。
    * 典型原语：
        * 管道：pipe()，实现单向数据传输。
        * 共享内存：shmget(), shmat(), shmdt()。
        * 消息队列：msgget(), msgsnd(), msgrcv()。
        * 信号量：semget(), semop()。
8. 优先级调整
    * 调整进程的优先级以改变调度顺序。
    * 典型原语：nice() setpriority()
9. 进程组与会话
    * 管理多个进程的集合。
    * 典型原语：
        * getpid()：获取当前进程 ID。
        * getppid()：获取父进程 ID。
        * getpgrp() 和 setpgrp()：获取或设置进程组。
        * setsid()：创建新会话。

### 进程间通信 IPC  
进程间通信（Inter-Process Communication, IPC）提供了多种机制，用于在不同进程之间传递数据、状态或同步操作。  
管道：pipe()，实现单向数据传输。共享内存：shmget(), shmat(), shmdt()。消息队列：msgget(), msgsnd(), msgrcv()。信号量：semget(), semop()。  

![image](https://github.com/user-attachments/assets/01f7a103-5864-43e3-9722-f1863251e3ad)  

![image](https://github.com/user-attachments/assets/cc7d5400-319d-444b-8bee-303b30c74530)


消息队列的直接通信方式：  

![image](https://github.com/user-attachments/assets/0bbb9b65-a5f1-47d0-9acb-0abd389179b0)

消息队列的间接通信方式（信箱）：  

![image](https://github.com/user-attachments/assets/70233381-0e1c-40be-9918-d7b9dda2c56f)

管道通信：

![image](https://github.com/user-attachments/assets/96547058-ec5b-4b7e-8136-c7e54f55f44f)


# 线程  

### 线程概念  

















































